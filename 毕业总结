#JVM总结要点：
jvm的要点，包括四大块，类的加载机制，javm内存的结构，gc算法-垃圾回收的要点，gc分析，怎么使用命令调优。类的加载机制的关键：类生命周期，类的加载器具体执行命令，双亲委派机制。内存结构包括，堆内存，方法区，栈。GC算法常用的种类：cms，G1，serial（单线程）parnew（多线程）等等。常用的调优命令：jps，jmap，jstst，jstack等等。常用的调优工具：jconsole，jvisualvm等。
#NIO总结要点：
IO的概念是阻塞式的面向流的。nio是面向缓冲区的非阻塞io，使用了选择器分配资源。java NIO系统的核心在于：通道(Channel)和缓冲区(Buffer)。通道表示打开到 IO 设备(例如：文件、套接字)的连接。若需要使用 NIO 系统，需要获取用于连接 IO 设备的通道以及用于容纳数据的缓冲区。然后操作缓冲区，对数据进行处理。通过netty学习nio的要点：一个高性能、异步事件驱动的NIO框架，使用更高效的socket底层，使用单线程串行化的方式，高效的Reactor线程模型。
#java并发
多线程编程的出现的原因是在于两个要点：对于计算机系统来说，cpu的速度比内存快很多，内存又比硬盘快很多。同时对于一些io特别长时间的操作，cpu内存的资源就会闲置。并发编程的必要几个特性：可见性，原子性，有序性，这些特性保证了并发编程的线程安全；死锁的出现原因：
(1)互斥，共享资源x和y只能被一个线程占用
(2)占有且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X；
(3)不可抢占，其他线程不能强行抢占线程 T1 占有的资源；
(4)循环等待，线程 T1 等待线程 T2 占有的资源，线程 T2 等待线程 T1 占有的资源，就是循环等待。
并发util基础的线程安全类：原子类，synchronized关键词。。还有很多暂略
#spring框架
主要有三大特点：容器，IOC（控制反转），AOP（面向切面编程）。ioc-控制反转，也成为di，依赖注入：从对象a直接引用和操作对象b，变成对象a里指需要依赖一个接口ib，系统启动和装配阶段，把ib接口的实例注入到对象a，这样a就不需要依赖一个ib接口的具体实现，也就是类b。其实AOP就是一个复杂动态代理的实现，只不过它融合了拦截器，利用了IoC功能。
动态代理是代理模式动态实现的方式，其中代理类是由JDK动态生成的。容器是spring内管理全部实例的方法
#MySQL总结
innoDB和myisam的区别，Innodb是聚集索引，使用的是B+树作为索引结构数据文件和索引文件绑定在一起，
必须要有主键，InnoDB支持表、行（默认）级锁，而Myisam只支持表级锁。
数据库事务：事务的特性，原子性：对于事务的所有的操作，要么全部成功，要么全部失败。一致性：在事务执行前后，应用系统的状态是一致的。
隔离性：多个事务之间不会相互影响。持久性：事务提交成功后，所有的数据都会持久保存到磁盘中。
脏读、不可重复读、幻读：脏读：是指一个事务中读取到了另一个事务中未提交的数据。
不可重复读：在一个事务内根据相同的查询条件进行多次查询，查询出来的结果是不一样的。原因是由于别的事务修改了一部分数据。
幻读：在一个事务内多次查询返回的结果集不一致（比如新增和删除了部分数据
3分库分表总结：
Sharding-jdbc；
Sharding-JDBC是当当开源的数据库分库分表中间件。Sharding-JDBC直接封装JDBC协议，可以理解为增强版的JDBC驱动，旧代码迁移成本几乎为零。Sharding-JDBC定位为轻量级java框架，
使用客户端直连数据库，以jar包形式提供服务，无proxy代理层，无需额外部署，无其他依赖，DBA也无需改变原有的运维方式。从简介还有架构图中，我们可以看出sharding-jdbc是通过分片策略改写sql语句，最后进行分库分表的。不像Mycat通过应用级别去操作。
#Rpc
RPC——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。这里客户端只需要知道Server端的接口ServiceProducer即可，服务端在执行的时候，会根据具体实例调用实际的方法ServiceProducerImpl，符合面向对象过程中父类引用指向子类对象。解决的问题：现在计算机应用的量级越来越大，单台结算机集群来完成，分布式的应用程序可以完成机器之间的调用。
 分布式缓存总结：
常用的分布式缓存：redis，目前为止Redis支持的键值数据类型如下:字符串类型; 散列类型; 列表类型; 集合类型; 有序集合类型。redis 是一个单线程处理数据，多线程io的key-value数据库。Redis 支持数据持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。Redis 支持数据的备份，即 master - slave 模式的数据备份。Redis 还支持key 过期，主从复制，哨兵等特性
