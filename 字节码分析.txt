javap -c Hello.class 
Compiled from "Hello.java"
public class Hello {
  public Hello();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return
  public static void main(java.lang.String[]);
    Code:
       0: new           #2                  // class Hello
       3: dup
       4: invokespecial #3                  // Method "<init>":()V
       7: astore_1
       8: return
}


2个点：一个Lambda的运行方式
    ： 一个 foreach的运行方式和for的区别（list）

迭代器方式：for each
使用Iterator类，顺序查找list内数据
如果在循环中赋值赋给的是迭代器，而不是list本身，会导致异常
42: invokeinterface #6,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
//迭代器初始化
      47: astore_2
      48: aload_2
      49: invokeinterface #7,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
//判断list是否有下一个
      54: ifeq          77
      57: aload_2
      58: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      63: checkcast     #9                  // class java/lang/Integer
      66: astore_3
      67: getstatic     #10                 // Field java/lang/System.out:Ljava/io/PrintStream;
      70: aload_3
      71: invokevirtual #11                 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V
      74: goto          48
普通方式：int i =0方式
并无直接操作数据，直接调用list.get方法。
循环中可以直接操作数据
  41: iconst_0
      42: istore_2
      43: iload_2
      44: aload_1
      45: invokeinterface #6,  1            // InterfaceMethod java/util/List.size:()I
      50: if_icmpge     72
      53: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;
      56: aload_1
      57: iload_2
      58: invokeinterface #8,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      63: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V
      66: iinc          2, 1
      69: goto          43
上文为for each和for loop 对于list的区别
这是用stream遍历循环的方式
Lambda表达式首先初始化Stream接口，然后调用了Object.getClass类获得类
最后调用invokedynamic -java8特有的动态指令Consumer消费流
   41: aload_1
      42: invokeinterface #6,  1            // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      47: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;
      50: dup
      51: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      54: pop
      55: invokedynamic #9,  0              // InvokeDynamic #0:accept:(Ljava/io/PrintStream;)Ljava/util/function/Consumer;
      60: invokeinterface #10,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      65: return